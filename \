#include <soci/mysql/soci-mysql.h>
#include <soci/session.h>
#include <soci/soci-backend.h>
#include <vector>
#include "crow/common.h"
#include "crow/http_response.h"
#include "database_common.h"
#include "database_connector.h"
#include "employee.h"
#include "middleware.h"
#include "misc_functions.h"
#include "permissions.h"

void AddEmployeeGETRequests(crow::App<AUTH_MIDDLEWARE> &app)
{
    CROW_ROUTE(app, "/users/<string>/appraisals").methods(crow::HTTPMethod::GET)
        ([&](const crow::request& req, const std::string& uuidRequest)
         {
         AUTH_INIT(PERMISSIONS::NONE_PERM, SUB_PERMISSIONS::NONE_SUBPERM)
         std::vector<std::string> titles(MAX_APPRAISALS_RETURNED);
         std::vector<std::string> descriptions(MAX_APPRAISALS_RETURNED);
         std::vector<std::tm> issueDate(MAX_APPRAISALS_RETURNED);
         std::vector<double> salaryImprovement(MAX_APPRAISALS_RETURNED);
         std::vector<std::string> managerFirstName(MAX_APPRAISALS_RETURNED);
         std::vector<std::string> managerLastName(MAX_APPRAISALS_RETURNED);
         std::vector<soci::indicator> salaryInds(MAX_APPRAISALS_RETURNED);
         std::string uuidToken = tokenInfo.GetUUID();
         if(uuidToken != uuidRequest)
            return crow::response(403, "forbidden");
         try
         {
            soci::session db(pool);
            db << GET_APPRAISALS_QUERY, soci::into(titles), soci::into(descriptions), soci::into(issueDate),
            soci::into(salaryImprovement, salaryInds), soci::into(managerFirstName),
            soci::into(managerLastName), soci::use(uuidToken);
         }
         catch(const std::exception& e)
         {
            std::cerr << "DATABASE ERROR(/users/<string>/appraisals): " << e.what() << '\n';
            return crow::response(500, "database error");
         }
         crow::json::wvalue result;
         result["size"] = titles.size();
         for(unsigned int i = 0; i < titles.size(); i++)
         {
            result["appraisals"][i]["title"] = titles[i];
            result["appraisals"][i]["description"] = descriptions[i];
            result["appraisals"][i]["managerFirstName"] = managerFirstName[i];
            result["appraisals"][i]["managerLastName"] = managerLastName[i];
            result["appraisals"][i]["issueDate"] = FormatTimeToString(issueDate[i]);
            if(salaryInds[i] == soci::indicator::i_ok) 
                result["appraisals"][i]["salaryImprovement"] = salaryImprovement[i];
            else 
                result["appraisals"][i]["salaryImprovement"] = 0.0;
         }
         return crow::response(200, result);
         });

    CROW_ROUTE(app, "/users/<string>/citations").methods(crow::HTTPMethod::GET)
        ([&](const crow::request& req, const std::string& uuidRequest)
         {
         AUTH_INIT(PERMISSIONS::NONE_PERM, SUB_PERMISSIONS::NONE_SUBPERM)
         std::vector<std::string> titles(MAX_CITATIONS_RETURNED);
         std::vector<std::string> descriptions(MAX_CITATIONS_RETURNED);
         std::vector<std::tm> issueDate(MAX_CITATIONS_RETURNED);
         std::vector<double> salaryDeduction(MAX_CITATIONS_RETURNED);
         std::vector<soci::indicator> salaryInds;
         std::vector<std::string> managerFirstName(MAX_CITATIONS_RETURNED);
         std::vector<std::string> managerLastName(MAX_CITATIONS_RETURNED);
         std::string uuidToken = tokenInfo.GetUUID();
         if(uuidToken != uuidRequest)
            return crow::response(403, "forbidden");
         try
         {
            soci::session db(pool);
            db << GET_CITATIONS_QUERY, soci::into(titles), soci::into(descriptions), soci::into(issueDate),
            soci::into(salaryDeduction, salaryInds), soci::into(managerFirstName),
            soci::into(managerLastName), soci::use(uuidToken);
         }
         catch(const std::exception& e)
         {
            std::cerr << "DATABASE ERROR(/users/<string>/citations): " << e.what() << '\n';
            return crow::response(500, "database error");
         }
         crow::json::wvalue result;
         result["size"] = titles.size();
         for(unsigned int i = 0; i < titles.size(); i++)
         {
            result["citations"][i]["title"] = titles[i];
            result["citations"][i]["description"] = descriptions[i];
            result["citations"][i]["managerFirstName"] = managerFirstName[i];
            result["citations"][i]["managerLastName"] = managerLastName[i];
            result["citations"][i]["issueDate"] = FormatTimeToString(issueDate[i]);
            if(salaryInds[i] == soci::indicator::i_ok) 
                result["citations"][i]["salaryDeduction"] = salaryDeduction[i];
            else 
                result["citations"][i]["salaryDeduction"] = 0.0;
         }
         return crow::response(200, result);
         });

    CROW_ROUTE(app, "/users/<string>/employee/salt").methods(crow::HTTPMethod::GET)
        ([&](const crow::request& req, const std::string& uuidInput)
         {
         AUTH_INIT(PERMISSIONS::NONE_PERM, SUB_PERMISSIONS::NONE_SUBPERM)
         std::string uuid = tokenInfo.GetUUID();
         if(uuidInput != uuid)
            return crow::response(403, "forbidden");
         std::string salt;
         soci::indicator ind;
         soci::session db(pool);
         db << GET_EMPLOYEE_SALT_QUERY, soci::use(uuid), soci::into(salt, ind);
         if(ind != soci::indicator::i_ok)
            return crow::response(404, "not found");
         return crow::response(200, salt);
         });

    CROW_ROUTE(app, "/departments/info").methods(crow::HTTPMethod::GET)
        ([&](const crow::request& req)
         {
         AUTH_INIT(PERMISSIONS::HUMAN_RESOURCES, SUB_PERMISSIONS::VIEW_JOB)
         crow::json::wvalue returnBody;
         std::vector<std::string> titles(MAX_DEPARTMENTS_RETURNED);
         std::vector<std::string> descriptions(MAX_DEPARTMENTS_RETURNED);
         std::vector<std::string> locations(MAX_DEPARTMENTS_RETURNED);
         soci::session db(pool);
         db << GET_DEPARTMENTS_QUERY, soci::into(titles), soci::into(descriptions), soci::into(locations);
         returnBody["size"] = titles.size();
         for(unsigned int i = 0; i < titles.size(); i++)
         {
             returnBody["departments"][i]["title"] = titles[i];
             returnBody["departments"][i]["description"] = descriptions[i];
             returnBody["departments"][i]["location"] = locations[i];
         }
         return crow::response(200, returnBody);
         }
         );

    CROW_ROUTE(app, "/jobs/<string>/info").methods(crow::HTTPMethod::GET)
        ([&](const crow::request& req, const std::string& uuid)
         {
         AUTH_INIT(PERMISSIONS::JOBS, SUB_PERMISSIONS::VIEW_JOB)
         soci::indicator ind;
         soci::session db(pool);
         std::string title, description;
         db << GET_JOB_INFO_QUERY, soci::use(uuid), soci::into(title, ind), soci::into(description);
         if(ind == soci::indicator::i_null)
            return crow::response(404, "not found");
         crow::json::wvalue result;
         result["title"] = title;
         result["description"] = description;
         return crow::response(200, result);
         });

    CROW_ROUTE(app, "/users/tasks").methods(crow::HTTPMethod::GET)
        ([&](const crow::request& req)
         {
         AUTH_INIT(PERMISSIONS::NONE_PERM, SUB_PERMISSIONS::NONE_SUBPERM)
         std::string uuid = tokenInfo.GetUUID();
         std::vector<std::string> titles(MAX_TASKS_RETURNED);
         std::vector<std::string> descriptions(MAX_TASKS_RETURNED);
         std::vector<std::string> creatorEmployees(MAX_TASKS_RETURNED);
         std::vector<std::tm> completionDates(MAX_TASKS_RETURNED);
         std::vector<soci::indicator> completionDateIndicators(MAX_TASKS_RETURNED);
         std::vector<std::tm> deadlines(MAX_TASKS_RETURNED);
         std::vector<std::string> managerFirstNames(MAX_TASKS_RETURNED);
         std::vector<std::string> managerLastNames(MAX_TASKS_RETURNED);
         soci::session db(pool);
         db << GET_TASKS_QUERY, soci::use(uuid), soci::into(titles), soci::into(descriptions),
         soci::into(deadlines), soci::into(completionDates, completionDateIndicators),
         soci::into(managerFirstNames), soci::into(managerLastNames);
         crow::json::wvalue result;
         result["size"] = titles.size();
         for(unsigned int i = 0; i < titles.size(); i++)
         {
            result["tasks"][i]["title"] = titles[i];
            result["tasks"][i]["description"] = descriptions[i];
            result["tasks"][i]["managerFirstName"] = managerFirstNames[i];
            result["tasks"][i]["managerLastName"] = managerLastNames[i];
            result["tasks"][i]["deadline"] = FormatTimeToString(deadlines[i]);
            result["tasks"][i]["completionDate"] = 
             completionDateIndicators[i] == soci::indicator::i_ok ? FormatTimeToString(completionDates[i]) : "N/A";
         }
         return crow::response(200, result);
         });

    CROW_ROUTE(app, "/users/employee/all-info").methods(crow::HTTPMethod::GET)
        ([&](const crow::request& req)
         {
         AUTH_INIT(PERMISSIONS::NONE_PERM, SUB_PERMISSIONS::NONE_SUBPERM)
         crow::json::wvalue body = crow::json::load(req.body);
         //Be prepareed little session, we are going to need you a lot
         std::string employeeID = tokenInfo.GetUUID();
         std::string departmentID, jobID, managerID;
         std::tm managerHireDate;
         std::string jobTitle, jobDescription;
         soci::session db(pool); 
         try
         {
            db << GET_ALL_IDS_QUERY, soci::use(employeeID), soci::into(departmentID), soci::into(jobID),
            soci::into(managerID), soci::into(managerHireDate);
            //I am not sure what will happen if jobID is null. However, I think it will just not
            //return anything. I will not test it now
            db << GET_JOB_INFO_QUERY, soci::into(jobTitle), soci::into(jobDescription)
            , soci::use(CHECK_NULLABILITY(jobID));
         }
         catch(const std::exception& e)
         {
            std::cerr << "DATABASE ERROR (/users/employee/all-info): " << e.what() << '\n';
            return crow::response(500, "database error");
         }

         });
}
